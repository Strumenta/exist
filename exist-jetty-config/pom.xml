<?xml version="1.0" encoding="UTF-8"?>
<!--

    eXist-db Open Source Native XML Database
    Copyright (C) 2001 The eXist-db Authors

    info@exist-db.org
    http://www.exist-db.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.exist-db</groupId>
        <artifactId>exist-parent</artifactId>
        <version>5.3.0-SNAPSHOT</version>
        <relativePath>../exist-parent</relativePath>
    </parent>

    <artifactId>exist-jetty-config</artifactId>
    <packaging>jar</packaging>

    <name>eXist-db Jetty Configuration</name>
    <description>Configuration for eXist-db NoSQL Database Jetty Server</description>

    <scm>
        <connection>scm:git:https://github.com/exist-db/exist.git</connection>
        <developerConnection>scm:git:https://github.com/exist-db/exist.git</developerConnection>
        <url>scm:git:https://github.com/exist-db/exist.git</url>
      <tag>HEAD</tag>
    </scm>

    <properties>
        <root.alias>root</root.alias>
        <root.keystore.path>${project.build.directory}/root.p12</root.keystore.path>
        <root.keystore.pass>root-store-secret</root.keystore.pass>
        <root.key.pass>root-key-secret</root.key.pass>
        <root.certificate.path>${project.build.directory}/root.pem</root.certificate.path>
        <ca.alias>ca</ca.alias>
        <ca.keystore.path>${project.build.directory}/ca.p12</ca.keystore.path>
        <ca.keystore.pass>ca-store-secret</ca.keystore.pass>
        <ca.key.pass>ca-key-secret</ca.key.pass>
        <ca.certificate.path>${project.build.directory}/ca.pem</ca.certificate.path>
        <server.alias>existdb</server.alias>
        <server.keystore.path>${project.build.directory}/generated-resources/keytool/org/exist/jetty/etc/keystore.p12</server.keystore.path>
        <server.keystore.pass>secret</server.keystore.pass>
        <server.key.pass>secret</server.key.pass>
        <server.certificate.path>${project.build.directory}/keystore.pem</server.certificate.path>
        <key.algorithm>RSA</key.algorithm>
        <key.size>2048</key.size>
        <keystore.type>PKCS12</keystore.type>
        <certificate.validity>1825</certificate.validity>   <!-- 5 years -->
    </properties>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>target/generated-resources/keytool</directory>
            </resource>
        </resources>

        <plugins>
            <!--
                Generates a chain of certificates for localhost SSL use by Jetty.
                The process is as described by: https://gist.github.com/granella/01ba0944865d99227cf080e97f4b3cb6
            -->
            <plugin>
                <groupId>com.evolvedbinary.thirdparty.org.codehaus.mojo</groupId>
                <artifactId>keytool-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                    <execution>
                        <id>generate-root-key</id>
                        <goals>
                            <goal>generateKeyPair</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${root.alias}</alias>
                            <dname>CN=Elemental Test Root Certificate, OU=Release Team, O=Evolved Binary, L=London, S=London, C=GB</dname>
                            <validity>${certificate.validity}</validity>
                            <keyalg>${key.algorithm}</keyalg>
                            <keysize>${key.size}</keysize>
                            <exts>
                                <ext>bc:c</ext>
                            </exts>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${root.keystore.path}</keystore>
                            <storepass>${root.keystore.pass}</storepass>
                            <keypass>${root.key.pass}</keypass>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-ca-key</id>
                        <goals>
                            <goal>generateKeyPair</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${ca.alias}</alias>
                            <dname>CN=Elemental Test CA Certificate, OU=Release Team, O=Evolved Binary, L=London, S=London, C=GB</dname>
                            <validity>${certificate.validity}</validity>
                            <keyalg>${key.algorithm}</keyalg>
                            <keysize>${key.size}</keysize>
                            <exts>
                                <ext>bc:c</ext>
                            </exts>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${ca.keystore.path}</keystore>
                            <storepass>${ca.keystore.pass}</storepass>
                            <keypass>${ca.key.pass}</keypass>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-root-certificate</id>
                        <goals>
                            <goal>exportCertificate</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${root.alias}</alias>
                            <rfc>true</rfc>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${root.keystore.path}</keystore>
                            <storepass>${root.keystore.pass}</storepass>
                            <file>${root.certificate.path}</file>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-ca-certificate-request</id>
                        <goals>
                            <goal>generateCertificateRequest</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${ca.alias}</alias>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${ca.keystore.path}</keystore>
                            <storepass>${ca.keystore.pass}</storepass>
                            <file>${ca.certificate.path}.req</file>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-ca-certificate</id>
                        <goals>
                            <goal>generateCertificate</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${root.alias}</alias>
                            <validity>${certificate.validity}</validity>
                            <rfc>true</rfc>
                            <exts>
                                <ext>bc=0</ext>
                                <ext>SAN=DNS:ca</ext>
                            </exts>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${root.keystore.path}</keystore>
                            <storepass>${root.keystore.pass}</storepass>
                            <infile>${ca.certificate.path}.req</infile>
                            <outfile>${ca.certificate.path}</outfile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>import-root-certificate-into-ca</id>
                        <goals>
                            <goal>importCertificate</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${root.alias}</alias>
                            <trustcacerts>true</trustcacerts>
                            <noprompt>true</noprompt>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${ca.keystore.path}</keystore>
                            <storepass>${ca.keystore.pass}</storepass>
                            <file>${root.certificate.path}</file>
                        </configuration>
                    </execution>
                    <execution>
                        <id>import-ca-certificate-into-ca</id>
                        <goals>
                            <goal>importCertificate</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${ca.alias}</alias>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${ca.keystore.path}</keystore>
                            <storepass>${ca.keystore.pass}</storepass>
                            <file>${ca.certificate.path}</file>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-server-key</id>
                        <goals>
                            <goal>generateKeyPair</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${server.alias}</alias>
                            <dname>CN=Elemental Test SSL Certificate, OU=Release Team, O=Evolved Binary, L=London, S=London, C=GB</dname>
                            <validity>${certificate.validity}</validity>
                            <keyalg>${key.algorithm}</keyalg>
                            <keysize>${key.size}</keysize>
                            <exts>
                                <ext>bc:c</ext>
                            </exts>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${server.keystore.path}</keystore>
                            <storepass>${server.keystore.pass}</storepass>
                            <keypass>${server.key.pass}</keypass>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-server-certificate-request</id>
                        <goals>
                            <goal>generateCertificateRequest</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${server.alias}</alias>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${server.keystore.path}</keystore>
                            <storepass>${server.keystore.pass}</storepass>
                            <file>${server.certificate.path}.req</file>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-server-certificate</id>
                        <goals>
                            <goal>generateCertificate</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${ca.alias}</alias>
                            <validity>${certificate.validity}</validity>
                            <rfc>true</rfc>
                            <exts>
                                <ext>ku:c=dig,keyEnc</ext>
                                <ext>SAN=IP:127.0.0.1,DNS:localhost</ext>
                                <ext>eku=sa,ca</ext>
                            </exts>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${ca.keystore.path}</keystore>
                            <storepass>${ca.keystore.pass}</storepass>
                            <infile>${server.certificate.path}.req</infile>
                            <outfile>${server.certificate.path}</outfile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>import-root-certificate-into-server</id>
                        <goals>
                            <goal>importCertificate</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${root.alias}</alias>
                            <trustcacerts>true</trustcacerts>
                            <noprompt>true</noprompt>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${server.keystore.path}</keystore>
                            <storepass>${server.keystore.pass}</storepass>
                            <file>${root.certificate.path}</file>
                        </configuration>
                    </execution>
                    <execution>
                        <id>import-ca-certificate-into-server</id>
                        <goals>
                            <goal>importCertificate</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${ca.alias}</alias>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${server.keystore.path}</keystore>
                            <storepass>${server.keystore.pass}</storepass>
                            <file>${ca.certificate.path}</file>
                        </configuration>
                    </execution>
                    <execution>
                        <id>import-server-certificate-into-server</id>
                        <goals>
                            <goal>importCertificate</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <alias>${server.alias}</alias>
                            <storetype>${keystore.type}</storetype>
                            <keystore>${server.keystore.path}</keystore>
                            <storepass>${server.keystore.pass}</storepass>
                            <file>${server.certificate.path}</file>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
